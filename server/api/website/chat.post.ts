import { createClient } from '@supabase/supabase-js'

export default defineEventHandler(async (event) => {
    const config = useRuntimeConfig()
    
    try {
        const body = await readBody(event)
        
        const { message, userId, dialogId, conversationHistory, files } = body
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('Received body:', { 
            hasMessage: !!message, 
            hasUserId: !!userId,
            messageType: typeof message,
            userIdType: typeof userId,
            userIdValue: userId
        })
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–∏–±–æ —Ñ–∞–π–ª—ã —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        const hasTextFiles = files && files.some((f: any) => f.isText && f.content && f.isSupported)
        const hasImageFiles = files && files.some((f: any) => f.isImage && f.isSupported)
        const hasUnsupportedFiles = files && files.some((f: any) => !f.isSupported)
        
        // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∑–≤–æ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã –ò–ò —Å–æ–æ–±—â–∏–ª –æ–± —ç—Ç–æ–º
        if ((!message || (typeof message === 'string' && message.trim() === '')) && !hasTextFiles && !hasImageFiles && !hasUnsupportedFiles) {
            throw createError({
                statusCode: 400,
                statusMessage: 'Missing message or files'
            })
        }
        
        if (!userId || userId === null || userId === undefined || userId === '') {
            throw createError({
                statusCode: 400,
                statusMessage: 'Missing or invalid userId field'
            })
        }
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ conversationHistory —ç—Ç–æ –º–∞—Å—Å–∏–≤
        const history = Array.isArray(conversationHistory) ? conversationHistory : []
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö
        const hasImages = files && files.some((f: any) => f.isImage && f.isSupported)
        
        // –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å:
        // - gpt-4o-mini –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –Ω–∞–º–Ω–æ–≥–æ –¥–µ—à–µ–≤–ª–µ gpt-4o
        // - –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'openai/gpt-4o' –∏–ª–∏ 'anthropic/claude-3-sonnet'
        // - –ï—â–µ –±–æ–ª–µ–µ –¥–µ—à–µ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: 'anthropic/claude-3-haiku' (–±—ã—Å—Ç—Ä–µ–µ, –¥–µ—à–µ–≤–ª–µ, –Ω–æ –º–µ–Ω—å—à–µ –∫–∞—á–µ—Å—Ç–≤–æ)
        // - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: 'qwen/qwen-2-vl-2b-instruct' (–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–º)
        const model = 'openai/gpt-4o-mini' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω—É –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ñ–∞–π–ª–æ–≤
        let userMessageContent = message || ''
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (files && files.length > 0) {
            const textFiles = files.filter((f: any) => f.isText && f.content && f.isSupported)
            const imageFiles = files.filter((f: any) => f.isImage && f.isSupported)
            const unsupportedFiles = files.filter((f: any) => !f.isSupported)
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ (–≤–∫–ª—é—á–∞—è SVG)
            if (textFiles.length > 0) {
                userMessageContent += '\n\n=== –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ===\n'
                textFiles.forEach((file: any) => {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    const isSvg = file.name.match(/\.svg$/i) || file.type === 'image/svg+xml'
                    const fileTypeLabel = isSvg ? ' (SVG - –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞, XML –∫–æ–¥)' : ''
                    
                    userMessageContent += `\n--- ${file.name}${fileTypeLabel} ---\n${file.content}\n`
                })
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–∞—Ö
            if (unsupportedFiles.length > 0) {
                userMessageContent += '\n\n=== –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã ===\n'
                unsupportedFiles.forEach((file: any) => {
                    const reason = file.unsupportedReason || '–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
                    userMessageContent += `\nüìé ${file.name}: ${reason}\n`
                })
                userMessageContent += '\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —ç—Ç–∏ —Ñ–∞–π–ª—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (TXT, MD) –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.'
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ –∫–∞–∫ base64
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        const messagesArray: any[] = [
            {
                role: 'system',
                content: `–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–¢—ã - —É–º–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ–≥–∞–π —Å —É—á–µ–±–æ–π, —Ä–∞–±–æ—Ç–æ–π, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º –∏ –ª—é–±—ã–º–∏ –¥—Ä—É–≥–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏.

–í–ê–ñ–ù–û:
- SVG —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç–µ–±–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç (XML –∫–æ–¥) - —Ç—ã –º–æ–∂–µ—à—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –æ–ø–∏—Å—ã–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —ç–ª–µ–º–µ–Ω—Ç—ã, —Å—Ç–∏–ª–∏ –∏ —Ç.–¥.
- –¢—ã –º–æ–∂–µ—à—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è.
- –¢—ã –º–æ–∂–µ—à—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (PNG, JPG, GIF, WEBP), –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∫—Ä–µ–ø–∏–ª –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤ (PDF, Word, Excel –∏ —Ç.–¥.), —Å–æ–æ–±—â–∏ –µ–º—É –æ–± —ç—Ç–æ–º –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (TXT, MD) –∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.`
            },
            ...history
        ]
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (files && files.some((f: any) => f.isImage && f.isSupported)) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Å content array
            const contentArray: any[] = []
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å
            if (userMessageContent.trim()) {
                contentArray.push({
                    type: 'text',
                    text: userMessageContent
                })
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            files.filter((f: any) => f.isImage && f.isSupported).forEach((file: any) => {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ data —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º data URL
                    let imageUrl = file.data
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ data URL, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
                    if (!imageUrl.startsWith('data:')) {
                        const mimeType = file.type || 'image/png'
                        imageUrl = `data:${mimeType};base64,${imageUrl}`
                    }
                    
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä base64 —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
                    if (imageUrl.length > 10000000) { // ~10MB –≤ base64
                        console.warn(`Image ${file.name} is too large for API, skipping`)
                        return
                    }
                    
                    contentArray.push({
                        type: 'image_url',
                        image_url: {
                            url: imageUrl
                        }
                    })
                } catch (error) {
                    console.error(`Error processing image ${file.name}:`, error)
                }
            })
            
            messagesArray.push({
                role: 'user',
                content: contentArray
            })
        } else {
            // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messagesArray.push({
                role: 'user',
                content: userMessageContent || '–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã —Ñ–∞–π–ª—ã'
            })
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenRouter API
        const openRouterResponse = await fetch('https://openrouter.ai/api/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${config.openRouterApiKey}`
            },
            body: JSON.stringify({
                model: model,
                messages: messagesArray,
                max_tokens: 12000
            })
        })
        
        if (!openRouterResponse.ok) {
            const errorText = await openRouterResponse.text()
            let errorMessage = `OpenRouter API error (${openRouterResponse.status})`
            
            try {
                const errorJson = JSON.parse(errorText)
                errorMessage = errorJson.error?.message || errorJson.message || errorText
                
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                if (errorMessage.includes('image') || errorMessage.includes('metadata') || errorMessage.includes('format')) {
                    errorMessage = `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${errorMessage}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (PNG, JPG, GIF, WEBP) –∏ –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. SVG —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ.`
                }
            } catch (e) {
                errorMessage = errorText || errorMessage
            }
            
            throw createError({
                statusCode: openRouterResponse.status,
                statusMessage: errorMessage
            })
        }
        
        const openRouterData = await openRouterResponse.json()
        const aiResponse = openRouterData.choices[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI.'
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Supabase
        const supabaseUrl = config.public.supabase?.url || process.env.SUPABASE_URL
        const supabaseKey = config.public.supabase?.key || process.env.SUPABASE_KEY
        
        if (!supabaseUrl || !supabaseKey) {
            throw createError({
                statusCode: 500,
                statusMessage: 'Supabase configuration missing'
            })
        }
        
        const supabase = createClient(supabaseUrl, supabaseKey)
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –≤ Supabase Storage –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        let filesData = null
        if (files && Array.isArray(files) && files.length > 0) {
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å service role –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
            const supabaseStorage = createClient(supabaseUrl, supabaseKey)
            
            const uploadedFiles = await Promise.all(
                files.map(async (file: any) => {
                    try {
                        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ Buffer (–¥–ª—è Node.js)
                        const base64Data = file.data.split(',')[1] || file.data
                        const buffer = Buffer.from(base64Data, 'base64')
                        // –í Node.js –∏—Å–ø–æ–ª—å–∑—É–µ–º Buffer –Ω–∞–ø—Ä—è–º—É—é, Supabase –ø—Ä–∏–Ω–∏–º–∞–µ—Ç Buffer
                        
                        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                        const fileExtension = file.name.split('.').pop() || 'bin'
                        const uniqueFileName = `${userId}/${dialogId || 1}/${Date.now()}-${Math.random().toString(36).substring(7)}.${fileExtension}`
                        
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Storage (–∏—Å–ø–æ–ª—å–∑—É–µ–º Buffer –Ω–∞–ø—Ä—è–º—É—é)
                        const { data: uploadData, error: uploadError } = await supabaseStorage.storage
                            .from('chat-files')
                            .upload(uniqueFileName, buffer, {
                                contentType: file.type || 'application/octet-stream',
                                upsert: false
                            })
                        
                        if (uploadError) {
                            console.error('Error uploading file:', uploadError)
                            return null
                        }
                        
                        // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
                        const { data: urlData } = supabaseStorage.storage
                            .from('chat-files')
                            .getPublicUrl(uniqueFileName)
                        
                        return {
                            name: file.name,
                            type: file.type,
                            size: file.size,
                            url: urlData.publicUrl,
                            path: uniqueFileName
                        }
                    } catch (error) {
                        console.error('Error processing file:', error)
                        return null
                    }
                })
            )
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏)
            filesData = uploadedFiles.filter(f => f !== null)
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å —Ñ–∞–π–ª–∞–º–∏ –µ—Å–ª–∏ –µ—Å—Ç—å)
        const userMessageData: any = {
            website_user_id: userId,
            role: 'user',
            content: message,
            dialog_id: dialogId || 1
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∫–∞–∫ JSONB –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å (—Ç–µ–ø–µ—Ä—å —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ Storage)
        // –î–ª—è jsonb –ø–µ—Ä–µ–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é, Supabase –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç
        if (filesData && filesData.length > 0) {
            userMessageData.files = filesData
        }
        
        const { error: userMessageError } = await supabase
            .from('website_conversations')
            .insert(userMessageData)
        
        if (userMessageError) {
            console.error('Error saving user message:', userMessageError)
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI
        const { error: aiMessageError } = await supabase
            .from('website_conversations')
            .insert({
                website_user_id: userId,
                role: 'assistant',
                content: aiResponse,
                dialog_id: dialogId || 1
            })
        
        if (aiMessageError) {
            console.error('Error saving AI message:', aiMessageError)
        }
        
        return {
            response: aiResponse
        }
    } catch (error: any) {
        // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë
        if (error.statusCode) {
            throw error
        }
        
        // –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ—à–∏–±–∫—É
        console.error('Unexpected error in chat endpoint:', error)
        throw createError({
            statusCode: 500,
            statusMessage: error.message || 'Internal server error'
        })
    }
})

